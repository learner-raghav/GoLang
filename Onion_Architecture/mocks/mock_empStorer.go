// Code generated by MockGen. DO NOT EDIT.
// Source: Onion_Architecture/store (interfaces: EmployeeStoreHandler)

// Package mock_store is a generated GoMock package.
//mockgen Onion_Architecture/store EmployeeStoreHandler
package mock_store

import (
	entity "../entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmployeeStoreHandler is a mock of EmployeeStoreHandler interface.
type MockEmployeeStoreHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeStoreHandlerMockRecorder
}

// MockEmployeeStoreHandlerMockRecorder is the mock recorder for MockEmployeeStoreHandler.
type MockEmployeeStoreHandlerMockRecorder struct {
	mock *MockEmployeeStoreHandler
}

// NewMockEmployeeStoreHandler creates a new mock instance.
func NewMockEmployeeStoreHandler(ctrl *gomock.Controller) *MockEmployeeStoreHandler {
	mock := &MockEmployeeStoreHandler{ctrl: ctrl}
	mock.recorder = &MockEmployeeStoreHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeStoreHandler) EXPECT() *MockEmployeeStoreHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEmployeeStoreHandler) Create(arg0 entity.Employee) (entity.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(entity.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEmployeeStoreHandlerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEmployeeStoreHandler)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockEmployeeStoreHandler) Delete(arg0 int) (entity.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(entity.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockEmployeeStoreHandlerMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmployeeStoreHandler)(nil).Delete), arg0)
}

// GetById mocks base method.
func (m *MockEmployeeStoreHandler) GetById(id int) (entity.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(entity.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockEmployeeStoreHandlerMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockEmployeeStoreHandler)(nil).GetById), id)
}

// Update mocks base method.
func (m *MockEmployeeStoreHandler) Update(arg0 entity.Employee) (entity.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(entity.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEmployeeStoreHandlerMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEmployeeStoreHandler)(nil).Update), arg0)
}
