// Code generated by MockGen. DO NOT EDIT.
// Source: Assignment/service (interfaces: ModelStoreHandler)

// Package mock_service is a generated GoMock package.
package mocks

import (
	entity "Assignment/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockModelStoreHandler is a mock of ModelStoreHandler interface.
type MockModelStoreHandler struct {
	ctrl     *gomock.Controller
	recorder *MockModelStoreHandlerMockRecorder
}

// MockModelStoreHandlerMockRecorder is the mock recorder for MockModelStoreHandler.
type MockModelStoreHandlerMockRecorder struct {
	mock *MockModelStoreHandler
}

// NewMockModelStoreHandler creates a new mock instance.
func NewMockModelStoreHandler(ctrl *gomock.Controller) *MockModelStoreHandler {
	mock := &MockModelStoreHandler{ctrl: ctrl}
	mock.recorder = &MockModelStoreHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelStoreHandler) EXPECT() *MockModelStoreHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockModelStoreHandler) Create(arg0 entity.Model) (entity.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(entity.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockModelStoreHandlerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockModelStoreHandler)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockModelStoreHandler) Delete(arg0 int) (entity.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(entity.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockModelStoreHandlerMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockModelStoreHandler)(nil).Delete), arg0)
}

// GetById mocks base method.
func (m *MockModelStoreHandler) GetById(arg0 int) (entity.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(entity.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockModelStoreHandlerMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockModelStoreHandler)(nil).GetById), arg0)
}

// Update mocks base method.
func (m *MockModelStoreHandler) Update(arg0 entity.Model) (entity.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(entity.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockModelStoreHandlerMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockModelStoreHandler)(nil).Update), arg0)
}
